import {
  Client,
  CommandInteraction,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ApplicationCommandOptionType,
  PermissionFlagsBits,
  CommandInteractionOptionResolver,
  TextChannel,
  NewsChannel,
  DMChannel
} from 'discord.js';
import { Pool } from 'pg'; // Assuming pg is used for PostgreSQL connection
import createPgPool from '../../utils/createPgPool.js'; // Make sure this function is properly typed in its own file

interface Command {
  name: string;
  description: string;
  type: number;
  options: Array<{
    name: string;
    description: string;
    type: typeof ApplicationCommandOptionType.Channel;
    required: boolean;
  }>;
  callback: (client: Client, interaction: CommandInteraction) => Promise<void>;
}

const certifSetup: Command = {
  name: 'certif_setup',
  description: 'configurer le systeme de certif',
  type: 1, // Assuming this is the correct type for a slash command
  options: [
    {
      name: 'channel',
      description: 'Le channel dans lequel tu souhaite envoyer les informations de certif',
      type: ApplicationCommandOptionType.Channel,
      required: true,
    }
  ],
  callback: async (client: Client, interaction: CommandInteraction): Promise<void> => {
    const pool: Pool = createPgPool();
    if (!interaction.isCommand()) return;
    const channel = (interaction.options as CommandInteractionOptionResolver).getChannel('channel', true);

    const embeds = [
      {
        "color": 0x2f3136,
        "image": {
         "url": "https://image.noelshack.com/fichiers/2023/41/6/1697295217-certification.png"
        },
        "fields": []
       },
       {
        "title": "La certification, qu'est-ce que c'est ? ",
        "fields": [],
        "color": 0x2f3136,
        "description":
         "- La certification de la Photosph√®re vous permet d'√™tre reconnu comme exer√ßant une activit√© **professionnelle**.\n- Elle permet de montrer votre l√©gitimit√© √† soumettre vos offres de **prestations** r√©mun√©r√©es.\n- Obtenez le r√¥le de **mannequin **ou de **photographe certifi√©** ! Cela vous permettra d'exercer un r√¥le de **mentor **aupr√®s des mod√®les ou des photographes d√©butants du serveur.\n- D√©bloquez une nouvelle ic√¥ne √† c√¥t√© de votre pseudo ! C'est bling bling ~",
        "image": {
         "url": "https://i.imgur.com/8A7CGCy.png"
        }
       },
       {
        "title": "Quelles infos dois-je fournir pour √™tre certifi√© ? ",
        "color": 0x2f3136,
        "fields": [
         {
          "name": "üì∏  Je suis **__Photographe__** :",
          "value":
           "- Je donne l'acc√®s √† mon num√©ro de **SIRET** ou de **SIREN**.\n- Je donne l'acc√®s √† un site internet en ligne o√π les informations de mon entreprise sont disponibles (nom, pr√©nom, siret/siren)\n- J'accepte que mon pr√©nom, nom ou que mon nom d'entreprise soit visible sur le serveur.",
          "inline": false
         },
         {
          "name": "üåü  Je suis **__Mannequin__** :",
          "value": "- Je donne l'acc√®s au site internet de mon **agence**, l√† o√π les informations de ma repr√©sentation sont disponibles. (nom, pr√©nom)\n- Je donne acc√®s aux coordonn√©es de mon agence. ",
          "inline": false
         }
        ],
        "image": {
         "url": "https://i.imgur.com/8A7CGCy.png"
        }
       },
       {
        "color": 0x2f3136,
        "description": "Nous assurons que les informations que vous nous fournissez sont trait√©es avec la plus grande confidentialit√© et dans le strict but de v√©rifier votre statut pour la certification. Elles ne seront en aucun cas utilis√©es √† d'autres fins ou partag√©es avec des tiers. ",
        "title": "üëâ S√©curit√©",
        "image": {
         "url": "https://i.ibb.co/9cr0sKP/Group-63.png"
        },
        "fields": []
       }
    ];

    const btn = new ActionRowBuilder<ButtonBuilder>()
      .addComponents(
        new ButtonBuilder()
          .setCustomId("btn_mannequin")
          .setStyle(3) // Assuming 3 is the correct style for a primary button
          .setLabel("Certification Mannequin")
          .setEmoji("üíõ"),
        new ButtonBuilder()
          .setCustomId("btn_photographe")
          .setStyle(3)
          .setLabel("Certification Photographe")
          .setEmoji("üß°")
      );

      try {
        let sentMessage; // D√©claration de sentMessage dans une port√©e accessible
    
        if (channel instanceof TextChannel || channel instanceof NewsChannel || channel instanceof DMChannel) {
            sentMessage = await channel.send({ embeds, components: [btn] });
        } else {
            console.log('Le canal s√©lectionn√© ne supporte pas l\'envoi de messages.');
            return; // Retourne pour √©viter d'ex√©cuter le code suivant si le canal n'est pas pris en charge
        }
    
        if (sentMessage) {
            console.log(sentMessage.id);
    
            const queryText = `INSERT INTO guild (guild_id, channel_id, message_id) VALUES ($1, $2, $3) ON CONFLICT (guild_id) DO NOTHING;`;
            await pool.query(queryText, [interaction.guildId, channel.id, sentMessage.id]);
        }
    } catch (error) {
        console.error('addChannel.js ' + error);
    }

    await interaction.reply({ content: `Votre systeme de certification √† √©t√© configur√© dans ${channel}`, ephemeral: true });
  }
};

export default certifSetup;
